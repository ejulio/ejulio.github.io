<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Notas on Júlio César Batista</title><link>https://juliocesarbatista.com/tags/notas/</link><description>Recent content in Notas on Júlio César Batista</description><generator>Hugo -- gohugo.io</generator><language>pt-br</language><lastBuildDate>Tue, 28 Nov 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://juliocesarbatista.com/tags/notas/index.xml" rel="self" type="application/rss+xml"/><item><title>A tale of concurrency through creativity in Python: a deep dive into how gevent works</title><link>https://juliocesarbatista.com/posts/a-tale-of-concurrency-through-creativity-in-python/</link><pubDate>Tue, 28 Nov 2023 00:00:00 +0000</pubDate><guid>https://juliocesarbatista.com/posts/a-tale-of-concurrency-through-creativity-in-python/</guid><description>gevent usa greenlets (corotinas ou, goroutines em go) ao invés de threads do sistema operacional. Essas operações são colaborativas, portanto elas precisam ceder (yield) a execução para outras rotinas. Por serem apenas rotinas no programa, sem intervenção do sistema operacional, são mais leves. Interessante como a biblioteca em C gevent resolve o problema. A biblioteca manipula a stack/heap para dar continuidade em uma rotina que deceu a execução. libev foi usada para manipular o loop de eventos e controlar a execução das greenlets Com monkey patching é possível tornar um código síncrono em assíncrono.</description></item></channel></rss>
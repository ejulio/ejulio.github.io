<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Matriz Incidência on Júlio César Batista</title><link>https://juliocesarbatista.com/tags/matriz-incid%C3%AAncia/</link><description>Recent content in Matriz Incidência on Júlio César Batista</description><generator>Hugo</generator><language>pt-br</language><lastBuildDate>Fri, 27 Dec 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://juliocesarbatista.com/tags/matriz-incid%C3%AAncia/index.xml" rel="self" type="application/rss+xml"/><item><title>Matriz de incidência termo-documento</title><link>https://juliocesarbatista.com/posts/matriz-incidencia-termo-documento/</link><pubDate>Fri, 27 Dec 2019 00:00:00 +0000</pubDate><guid>https://juliocesarbatista.com/posts/matriz-incidencia-termo-documento/</guid><description>&lt;p>Para obter as ocorrências de uma &lt;em>query booleana&lt;/em>, por exemplo, &lt;code>casa AND blumenau&lt;/code> seria necessário passar em todos os documentos procurando por &lt;code>casa&lt;/code> e depois procurar novamente por &lt;code>blumenau&lt;/code>.
De certa forma, essa abordagem não é completamente ruim.
Mas existem algumas abordagens que podem melhorar o tempo da consulta e consumo de memória.&lt;/p>
&lt;!-- raw HTML omitted -->
&lt;p>Agora considere uma nova consulta, por exemplo, &lt;code>casa AND gaspar&lt;/code>, seria necessário repassar em todos os documentos novamente.
Assim, existe um certo custo computacional que pode ser otimizado.
Uma forma de evitar esse problema é criando um índice (assim como no final de um livro, onde são listadas as palavras e as páginas que elas aparecem).
Nesse caso, a consulta pode ser simplificada procurando pelas palavras &lt;code>casa&lt;/code> e &lt;code>blumenau&lt;/code> e filtrar apenas os documentos onde ambas aparecem.
Note que a otimização foi em relação à não precisar passar em todas as palavras de todos os documentos.&lt;/p></description></item></channel></rss>